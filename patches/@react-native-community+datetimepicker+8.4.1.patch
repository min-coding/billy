diff --git a/node_modules/@react-native-community/datetimepicker/ios/RNDateTimePicker.m b/node_modules/@react-native-community/datetimepicker/ios/RNDateTimePicker.m
index 9c73c8e..7f162f6 100644
--- a/node_modules/@react-native-community/datetimepicker/ios/RNDateTimePicker.m
+++ b/node_modules/@react-native-community/datetimepicker/ios/RNDateTimePicker.m
@@ -23,15 +23,30 @@
 - (instancetype)initWithFrame:(CGRect)frame
 {
   if ((self = [super initWithFrame:frame])) {
-    #ifndef RCT_NEW_ARCH_ENABLED
-      // somehow, with Fabric, the callbacks are executed here as well as in RNDateTimePickerComponentView
-      // so do not register it with Fabric, to avoid potential problems
-      [self addTarget:self action:@selector(didChange)
-               forControlEvents:UIControlEventValueChanged];
-      [self addTarget:self action:@selector(onDismiss:) forControlEvents:UIControlEventEditingDidEnd];
-    #endif
+#ifndef RCT_NEW_ARCH_ENABLED
+    // With Fabric, callbacks are executed in RNDateTimePickerComponentView as well;
+    // keep these only for Paper.
+    [self addTarget:self action:@selector(didChange)
+      forControlEvents:UIControlEventValueChanged];
+    [self addTarget:self action:@selector(onDismiss:)
+      forControlEvents:UIControlEventEditingDidEnd];
+#endif
 
     _reactMinuteInterval = 1;
+
+    // ✅ Force Gregorian calendar & stable POSIX locale regardless of device region (e.g., TH → BE).
+    @try {
+      self.calendar = [NSCalendar calendarWithIdentifier:NSCalendarIdentifierGregorian];
+      // POSIX locale ensures Gregorian formatting and avoids region-specific calendars.
+      self.locale = [NSLocale localeWithLocaleIdentifier:@"en_US_POSIX"];
+    } @catch (NSException *exception) {
+      // No-op: fall back to system defaults if anything unexpected happens.
+    }
+
+    // (Optional) Keep wheels style for consistency with your UI.
+    if (@available(iOS 13.4, *)) {
+      self.preferredDatePickerStyle = UIDatePickerStyleWheels;
+    }
   }
   return self;
 }
@@ -41,7 +56,10 @@ RCT_NOT_IMPLEMENTED(- (instancetype)initWithCoder:(NSCoder *)aDecoder)
 - (void)didChange
 {
   if (_onChange) {
-    _onChange(@{ @"timestamp": @(self.date.timeIntervalSince1970 * 1000.0), @"utcOffset": @([self.timeZone secondsFromGMTForDate:self.date] / 60 )});
+    _onChange(@{
+      @"timestamp": @(self.date.timeIntervalSince1970 * 1000.0),
+      @"utcOffset": @([self.timeZone secondsFromGMTForDate:self.date] / 60)
+    });
   }
 }
 
@@ -65,11 +83,12 @@ RCT_NOT_IMPLEMENTED(- (instancetype)initWithCoder:(NSCoder *)aDecoder)
   _reactMinuteInterval = minuteInterval;
 }
 
-- (void)setDate:(NSDate *)date {
-    // Need to avoid the case where values coming back through the bridge trigger a new valueChanged event
-    if (![self.date isEqualToDate:date]) {
-        [super setDate:date animated:NO];
-    }
+- (void)setDate:(NSDate *)date
+{
+  // Avoid triggering a new valueChanged event from bridged values.
+  if (![self.date isEqualToDate:date]) {
+    [super setDate:date animated:NO];
+  }
 }
 
 @end
\ No newline at end of file
